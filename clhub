#!/usr/bin/env python

# Copyright (C) 2012 Massimo Santini <massimo.santini@unimi.it>
#
# This file is part of Learning-Week-2012-Software.
#
# Learning-Week-2012-Software is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# Learning-Week-2012-Software is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Learning-Week-2012-Software If not, see <http://www.gnu.org/licenses/>.

from argparse import ArgumentParser, FileType
from collections import namedtuple
from functools import wraps
from getpass import getpass
from httplib import responses
from json import dump, dumps, load, loads
from mimetools import Message
from os.path import expanduser, exists
from StringIO import StringIO
from subprocess import Popen, PIPE
from xml.dom.minidom import parseString
from xml.parsers.expat import ExpatError

__version__ = '0.1.1'

def provide_token( required = True ):
	def _r( f ):
		@wraps( f )
		def _c( args ):
			try:
				token = tokens[ args.user ]
			except KeyError:
				if ( required ):
					print 'No token found for {0}, plsease authenticate first...'.format( args.user )
					return
				else:
					token = None
					print 'No token found for {0}, using anonymous access...'.format( args.user )
			return f( args, token )
		return _c
	return _r

def curl( args, data = None, token = None ):
	if token:
		auth = [ '-H', 'Authorization: token {0}'.format( token ) ]
	else:
		auth = []
	p = Popen( [ 'curl', '-i', '-s' ] + auth + ( [ '-d', '@-' ] if data else [] ) + args, stdin = PIPE, stdout = PIPE )
	response = p.communicate( dumps( data ) if data else None )[ 0 ]
	status_headers, body = response.split( '\r\n\r\n', 1 )
	if status_headers == 'HTTP/1.1 100 Continue':
		status_headers, body = body.split( '\r\n\r\n', 1 )
	status, headers = status_headers.split( '\r\n', 1 )
	status = int( status.split()[ 1 ] )
	status = ( status, responses[ status ] if status in responses else None )
	headers = dict( Message( StringIO( headers ) ).items() )
	try:
		json = loads( body )
	except ValueError:
		json = None
	try:
		xml = parseString( body )
	except ExpatError:
		xml = None
	return curl.Result( status = status, headers = headers, body = body, json = json, xml = xml )
curl.Result = namedtuple( 'Result', 'status headers body json xml' )

def pprint( json ):
	print dumps( json, sort_keys=True, indent=4, separators=(',', ': ') )

def do_auth( args ):
	pwd = getpass( 'Password for user {0}: '.format( args.user ) )
	res = curl(
		[ '-u', '{0}:{1}'.format( args.user, pwd ), 'https://api.github.com/authorizations' ],
		{ 'scopes': [ 'user', 'repo', 'gist' ], 'note': 'Clhub' }
	)
	try:
		token = tokens[ args.user ] = res.json[ 'token' ]
	except KeyError:
		raise RuntimeError( 'Problem authenticationg' )
	with open( tokens_path, 'w' ) as f:
		dump( tokens, f )
	print 'Got token:', token

@provide_token()
def do_gmk( args, token = None ):
	res = curl( [ 'https://api.github.com/gists' ],
		{
			'description': args.desc,
			'public': not args.private,
			'files' : { args.name: { 'content': args.file.read() } }
		},
		token
	)
	print 'Gist id: ', res.json[ 'id' ]

@provide_token()
def do_gup( args, token = None ):
	curl( [
		'-X', 'PATCH',
		'https://api.github.com/gists/{0}'.format( args.gid )
		],
		{ 'files': { args.name: { 'content': args.file.read() } } },
		token
	)

@provide_token()
def do_hls( args, token = None ):
	res = curl( [
		'https://api.github.com/repos/{0}/{1}/hooks'.format( args.user, args.repo )
		],
		token = token
	)
	for hook in res.json: pprint( hook )

@provide_token()
def do_wmk( args, token = None ):
	res = curl( [
		'https://api.github.com/repos/{0}/{1}/hooks'.format( args.user, args.repo )
		],
		{ 'name': 'web', 'config': { 'url': args.url, 'content-type': 'form' } },
		token
	)
	pprint( res.json )


if __name__ == '__main__':

	argparser = ArgumentParser( prog = 'clhub' )
	argparser.add_argument( '--version', action = 'version', version = '%(prog)s {0}'.format( __version__ ) )

	subparsers = argparser.add_subparsers( help = 'subcommands')

	# auth

	parser_auth = subparsers.add_parser( 'auth', help = 'obtain an authorization token' )
	parser_auth.add_argument( 'user', help = 'user to authenticate as to obtain the token' )
	parser_auth.set_defaults( func = do_auth )

	# gists

	parser_gmk = subparsers.add_parser( 'gmk', help = 'post the contents of a file in a new gist' )
	parser_gmk.add_argument( 'user', help = 'gist owner' )
	parser_gmk.add_argument( 'desc', help = 'gist description' )
	parser_gmk.add_argument( '-p', '--private', help = 'whether the gist must be private', action = 'store_true' )
	parser_gmk.add_argument( 'name', help = 'name of the file to crate in the gist' )
	parser_gmk.add_argument( 'file', help = 'content for the file', type = FileType( 'r' ) )
	parser_gmk.set_defaults( func = do_gmk )

	parser_gup = subparsers.add_parser( 'gup', help = 'update the contents of a file in a gist' )
	parser_gup.add_argument( 'user', help = 'gist owner' )
	parser_gup.add_argument( 'gid', help = 'gist id' )
	parser_gup.add_argument( 'name', help = 'name of the file in the gist to update' )
	parser_gup.add_argument( 'file', help = 'updated content for the file', type = FileType( 'r' ) )
	parser_gup.set_defaults( func = do_gup )

	# hooks

	userrepo_parser = ArgumentParser( add_help = False )
	userrepo_parser.add_argument( 'user', help = 'repository owner' )
	userrepo_parser.add_argument( 'repo', help = 'repository name' )

	parser_hls = subparsers.add_parser( 'hls', help = 'list the hooks of a repo', parents = [ userrepo_parser ] )
	parser_hls.set_defaults( func = do_hls )

	parser_wmk = subparsers.add_parser( 'wmk', help = 'add a web hook to a repo', parents = [ userrepo_parser ] )
	parser_wmk.add_argument( 'url', help = 'url to receive the post' )
	parser_wmk.set_defaults( func = do_wmk )

	# read stored tokens if present

	tokens_path = expanduser( '~/.clhub-tokens.json' )
	if exists( tokens_path ):
		with open( tokens_path, 'r' ) as f: tokens = load( f )
	else:
		tokens = dict()

	# go!

	args = argparser.parse_args()
	args.func( args )
